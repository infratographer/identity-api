// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/x/gidx"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX2/bNhD/KgduDxug2G775rc0HgJ1KxbECfqQBgVNne1LJVIjKSeGoe8+kJRi2ZLt",
	"2R2Kpu1TKOp0/36/+xOvmFBZriRKa9hwxYyYY8b98UIjtxgbU6B2z7lWOWpL6N+KlFP2KeN5TnLmb3iS",
	"kCUleXq1IWmXObIhM1aTnLEyYgkaoSl3smzILv74C/Ap12gMKWmgUglWfUYJ3owBq0DZOerqmUW1VjV5",
	"QGGd1ofHz+ZTocmZ3LTw7sOfY7i9jtdfVb5E7Olsps4kz7ASc1JlxMLNtp5zmBcZl2caecInKYITg6nS",
	"YOcIFBIVtePtdOr2Ot76tAfvC2Mh41bM/fVHRsZ8ZCFmWPC0QCAJJIXKXIbefbgxB2Ly8ZQR0/hPQRoT",
	"NrwLwQWvGlm7L6MK8b/PCzu/SAmlbcPOi4RQiq7sVG8M2Dm3YOdkQHgtILgE5wEayyJGFrNuYlQXXGu+",
	"PBWGYLINQ1cSXMwjTNHiNZpcSYPtgE0hBBrT4Ub6yJcGrC6wtzY3USpFLlv2ajXO5IspKUraYccjUNN9",
	"hN8kYDyqLyqpGSVPvSuNU3rCJB79rNwjKpcSFu0o32ibPWui3eYJt/izg79kHpQRO7EtX2ourY+1ljFH",
	"9eCuHuBdgde9AQR/wFf5l7aBbshG6yfXeC52tPeIGRQa7Q5nG76Og9yhAdGstefs3nskSE5V284YRaHJ",
	"LuHG036MekEC4bfxzfh3eM8ln2Hm7J9fxUAGuPQnR6DMvXR0GN+MQSg5pVmhuVNr/GQhm+JuA5uqWcQW",
	"qE1wadAb9F653KgcJc+JDdmb3qD3hkUs53buCdDnOfUXr/phbpr+KhziURlCdNPRnRzbvE9x4lFx901K",
	"OpWaZ2hRGza866aMaNCF3LVzo87zkNWmWRMKN2Cjai9tM/YAq8p7pyrMdh/u68HA9z4lbVVIPM9TEj60",
	"/oNxzq4a1n7VOGVD9kt/vSb3qx25v7U6eG5scSJM/WmRQkMsYqbIMq6Xz4n0dAgpWhOcu6Z816z70NVn",
	"geWbgFyi/cHRaIZ/EhSXaA242taZtw98ogq7RmbdQ3q74Smj54oKM8H0V5T8h1qK6+GzF7iwfQXNbqRW",
	"Ojvx8x3su6sjfbCOquw8kg1DeEYLlBCPmqiFbO+vpyDzdukr4ChUZn6+vGRIKjaeBIWvozUOk+We3Odu",
	"VWpnP6ysp5VEEdbdr5R//0/tW5Us/+fUV0t7ubmWOIfLbxT24HED+W7MGw1SPUrfH/3feFTWO4hfb5Xp",
	"qMr2DxSHBp1T7ViRa7Ugtxb5lrAx/wqZeJZ18KXy7NsnTTsxX5k5Xzx9QwSNRUgcMWpbTKpm7yEmHdNh",
	"VE0l4T+tOw7J74I6zcp/Gf2mQZi9/aYs/w0AAP//PiWS5+QWAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
