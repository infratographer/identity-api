// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors A list of errors.
	Errors []string `json:"errors"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID openapi_types.UUID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yWUW/bOAzHvwqhu4c7wE2y2578ti3D4N0NGJoWe+iGQbWZRJ0t6SQqXVD4ux8oOWsc",
	"ey06dOgV6FMcWSb/In8ieSVK01ijUZMX+ZXw5RobGR9fO5SEhfcBHf+3zlh0pDC+LWupmi+NtFbpVVyR",
	"VaVIGS3rD72dtLUocuHJKb0SbSYq9KVTlveKXLx+8w/gN+vQe2W0h84kkPmKGqIbD2TA0Bpd919kO6vm",
	"/AJLYqsXl1/9l+AUu+x7ePfx7wWcHhfXX3VaMvHtaGWOtGyw28a72kyklUM7L2EdGqmPHMpKntcIvA2W",
	"xgGtEVQKVDY876io0+Pi4NMJvA+eoJFUruPyJ6G8/yTSmWEj64CgNChdmoYj9O7jib/lTPE8bSYc/huU",
	"w0rkZ+lwSdVe1D63mZhjjYTH6K3RHoc596Es0fuRyNSXcuuBXMDJtaJzY2qUeiBgZ4ZdvnHOuB97RH49",
	"5hBq5QnMEtIO9qoIm3HgugXpnNwO1HQuWMyjYV1Vw5AUcw5Hj8SlcY0kkYsQVHULKcX86RLd4RLFeI7f",
	"pOyQl2u0Tm0lCZ+K6WPmoGUUlF6aoYwFlsEp2sJJDPcC3UaVCH8sThZ/wnup5Qob1AQvPxSgPEgdn1h4",
	"wy9ZxuJkAaXRS7UKTrLZWNpIUY0/dtA3LTKxQeeTpNlkNnnGcTMWtbRK5OL5ZDZ5LjJhJa0jU1Np1XTz",
	"bJoiF5es8cS/jF6UUVRM1/5EkO4Denplqm2E2GhCHT+T1taqjB9OLzwL2U0W/PS7w6XIxW/T69Fj2s0d",
	"056Ltn/ruL3EhdQtotC/ZrN7873v9SCxqWMtQw077xzTF/fovN8IRzTEDXvu20z40DTSbb9nJiLV8c/U",
	"SK4lZ13t4TrUZofJnl6pqk0kc+8f5jzNBN9zbqWTDVLE5Gy8BSXLXGU6m3xdRB552xXNPBXQfm6zvVDd",
	"3Lra9vMv5OBgDLoLDy8eiocJpBTBpfSgDcHSBF0dUJIOtkcJXCpK5XGlNqihmI9zk4kVjtSDt0hpz6tt",
	"Mb8rHGzxsZHxExXi/03EW6R9HM63NyBguZcOIUgzzc8ViJDmoV+Gwf33p94c99SfbuhPDwr/AeYpX7e3",
	"x7b9LwAA//+RWvmhEBEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
