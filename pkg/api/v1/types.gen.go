// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors A list of errors.
	Errors []string `json:"errors"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID openapi_types.UUID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX328TORD+V0a+e7iTtkk4eNo3IAgtd0ioacVDQcjdnSQuu7axxylRtP/7aexN82MX",
	"CidOtKhvjnc88834+2acjShNY41GTV7kG+HLJTYyLp87lISF9wEd/7bOWHSkMH4ta6maD420VulF3JFV",
	"pUgZLes3B5a0tihy4ckpvRBtJir0pVOWbUUunr/4B/Czdei9MtpD5xLIfEQNMYwHMmBoia77LbKtV3N5",
	"hSWx16vrj/5DcIpDHkZ49fbvGZyfFrtTHZZMfD5ZmBMtG+zM2KrNRNo59vMUlqGR+sShrORljcBmMDcO",
	"aImgUqGyfr6DoM5Pi6OjI3gdPEEjqVzG7XdCef9OpJxhJeuAoDQoXZqGK/Tq7Zm/JaeYT5sJh5+CcliJ",
	"/CIll1DtVe19m4kp1kh4it4a7bF/5z6UJXo/UJn6Wq49kAs42iG6NKZGqXsAtm445AvnjPtyROTPQwGh",
	"Vp7AzCFZcFRF2AwTrtuQzsl1D00XgsHcG66rql+SYsrlOGDi3LhGkshFCKq6hSnF9EFE3yGiWM9hJWXH",
	"fNlR69xWkvChmd5nHrRMBaXnpg9jhmVwitZwFss9Q7dSJcIfs7PZn/BaarnABjXB0zcFKA9SxxUDb/gj",
	"w5idzaA0eq4WwUl2G1sbKarxywEOXYtMrND5BGkymowecd2MRS2tErl4PJqMHotMWEnLyKmxtGq8ejRO",
	"lfPjjaralByPA14xAyOaohJ5NyaK7RVZ6WSDhNynL4a7UvLMxOt8cgVFHiFsdZQnTe1ExtMk6x4kDOLr",
	"3axt3/PhNEhiWn9NJlFbRhNqiqKytlZlTGR85RnfZs//7w7nIhe/jXcvonH3HBofTcbIgaO7T0NtHmpw",
	"N2aZeDJ58sNAHM7KAQzR4Cb8CNIVwbX0oA3B3ARdxU7mQ9NIt765y8jF7pKuFSXFLNQKNRTTSEDJbemi",
	"a2OppS2Q+tx4iZRsnq2L6feSgz3eN2Z0Mvh1GPESaZ8Ol+uvUMBye+2TII25/9YgQhqR/xsNPgX09MxU",
	"6x/MgG60t4cPBYbY3i32TX4W+34y+Y9onu5rj+nDHG+zm/FIqCXH36RFMW23EzM+6IwfaIcH/6G/SQnJ",
	"OSuhjGe30lB6WBNbMHdRGQfZPyjjW6mZynY7Ndv23wAAAP//7YKlgr4RAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
