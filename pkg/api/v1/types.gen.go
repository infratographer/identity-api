// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID openapi_types.UUID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID openapi_types.UUID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXW/bNhf+KwTf92IDFNtt73yXxkOgbsWKOEEv0qCgqWObqURq5KFTw9B/Hw4px7Kl",
	"2LP3gXrrnUxR5+N5nvORrLg0RWk0aHR8uOJOzqEQ4fHKgkBInfNg6XdpTQkWFYS3Mheq+FyIslR6Fk5E",
	"lilURov8w9ZNXJbAh9yhVXrGq4Rn4KRVJd3lQ3710y8MvpYWnFNGO1abZGi+gGbBjWNomME52Po3T9ZW",
	"zeQRJJLVx6cv7rO3ilxue3j38ecxu7tJN1/VsST868XMXGhRQH2NblUJjye7di7Z3BdCX1gQmZjkwOga",
	"mxrLcA5MRaCSdr6dQd3dpDuf9th775AVAuU8HH/iyrlPPObMFiL3wJRmSktTEELvPt66AzmFfKqEW/jN",
	"KwsZH97H5GJUDdQeqqRm/NdLj/OrXIHGNu3CZwq07EKnfuMYzgUynCvHZLDCpNCMIgCHPOEKoegWRn0g",
	"rBXLU2mILts0dIFAOY8gB4QbcKXRDtoJOy8lONcRRv4klo6h9dDbuJsYk4PQLX9rM+TybEpKZe200xEz",
	"023BT40tBPIh915lBwSZjr7X6hG1GvDsLthkVy8bad2VmUD43rPPWQdVwk9sxNdWaAy5ru+4o7puV9WH",
	"UNjr3oDFeFg6Oqnwu0kabX5Rc7l6oYUn3IG0gC+E14huHO8dGgLN6nrG8yFgr/TUtP2MQXqrcMlug9DH",
	"YBdKAvthfDv+kb0XWsygIP+XH1KmHBM6PJFkCnpJAhjfjpk0eqpm3goy68L0UJjDyw62TfOEL8C6GNKg",
	"N+i9ImxMCVqUig/5m96g94YnvBQ4D5T3Ran6i1f9OBtdfxUf0lEVU6QJSE+krxBTmgVW6LwpQjJpRQEI",
	"1vHhfbdIZEMgio4pjDXOQ752zZtU0BBN6t2TAtkvrKp6oI/jxA4Jvh4MQn8zGutiEWWZKxmS6T86Cm/V",
	"sP9/C1M+5P/rb5bffr359ncWgqCGHRXEWT71OWtcS7jzRSHs8hm6IIAIykbSghrvfbO2Y+eeRV1vU3AN",
	"+J/Dv5nwSeBfAzpG9Us5UEsRE+Nxw8WmT/ReJqRKnqsmdnrXX6nsD9RLuh4pe6mKW1S0TIOyttnJWGDg",
	"X1Ar9mCt1Hg8KYzDdKYWoFk6avIU8d1fM/HO22VQ+VE8zMLUOC8SasWdBH6olQ3yk+UetEtactp4x2Xz",
	"NNn7uKj+bYiHPznfmmz5F4NdL9jV9kJBIVbfKNEx4gbX3Sw32h6CFmFZiA/pqFrvD2EZNa6j9tr/QDgg",
	"iNtgm6RQWrNQtNOEyt8aZV5nQVodIlnH9i1KpQ3GP6yXPz1JYwaNNUYeMTY79FNP0kP6OaaX4LOAZPh2",
	"3VyUPlfBNKv8PHpLQyZ7e0tV/R4AAP//z6Tyrm4WAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
