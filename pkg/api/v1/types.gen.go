// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerIssuersParams defines parameters for GetOwnerIssuers.
type GetOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
