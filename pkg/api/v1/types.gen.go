// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`

	// Scope Scopes that this client can request
	Scope *[]string `json:"scope,omitempty"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Error defines model for Error.
type Error struct {
	// Errors List of error messages
	Errors []string `json:"errors"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID openapi_types.UUID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID openapi_types.UUID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Scope Grantable scopes
	Scope string `json:"scope"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound = Error

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY3W/bNhD/Vw7cHjZAtd2PJ7+1cReoa7ciTtCHNCho6mwzlUiNRyU1Av3vw5GyLceK",
	"ExvZ0Gx9oyjqPn73uw/qRihblNag8SSGN8IhldYQhoc/rP/NVibjtbLGo/G8lGWZayW9tqZ/SdbwHqk5",
	"FpJXPzuciqH4qb8W3I9vqf/WOetEXdeJyJCU0yULEUNxgmQrpxCuJYGxHqZBLx9svmXRRw6lx5SoQsfP",
	"pbMlOq+jtSqXuvhSyLLUZhZ2ZJZpViDzjxsn/aJEMRTknTYzsWXM0dv3gN9Kh0TaGoJGJHj7FQ0ENQTe",
	"gvVzdM2zSJZS7eQSlWepl9df6UvlNKvc1PDu0+9jODtJ1181tiTi27OZfWZkgc0xPlUnIu7clvMa5lUh",
	"zTOHMpOTHIGPwdQ68HMEHYFKtv3tNOrsJL31aQ8+VOShkF7Nw/ZnoYk+i+gzXMm8QtAGtFG2YITefTql",
	"e3wK/tSJcPhXpR1mYngenYtWtVC7qJMm4n++rvz8KNcN/zbDLqtMo1Fd6DRvCPxcevBzTaCCFFDSAFuA",
	"5EUitMeimxjNhnROLg4NQ1TZFQZStuwQN+btRzO6C2uGdoQ5ejxp8n0bV6qUQqIOb/NruSDwrsLe2quJ",
	"tTlKs6VvKYZVxvTf0oS83aHovSYPdgrhPRRIJGdIh7ve6LnoSNUnU1N0to1TOmKUNjJ+al0hvRiKqtLZ",
	"PRmZjn4Uqz2KVcCzu2Ilt/lysaLWWZlJjz+a1lPmQZ2IAzvRsZPGB1+XZ2ivttOV9cEUeNEbQLQH0tFB",
	"id8dpNH6iYvL0b49bO1xOECdn6Jy6O/wrOXYOJ7bkrAjMVehWBp4EcKnzdR29FtUldN+AachV8borrRC",
	"+GV8Ov4VPkgjZ1iwHa8/pqAJpAkrZh0U/JZJND4dg7JmqmeVC5Mxhd6ofY53a9iULRJxhY6iTYPeoPec",
	"QbIlGllqMRQve4PeS5GIUvp5oE1flrp/9bwfxwPq38RFOqqjj9zfecUcDTalWYgs77eJzCKdLNAjd+Hz",
	"bqKpFsk0b7MZS8CHYqlatGPCI0LSuhrsJmddXySb948Xg8GjXT1ujTsdd5BxnFSmVQ6tY4mgqiikWyyh",
	"CwTYhM9LLt3n7eoQa/8s0nszAMfo/3fotx1+KPSJeDV4dZfglaX91SV1M1bHHCnOd3aaq5ic2MqvYtcq",
	"nL27I1gnqySLzYX6Nzp7QHqlyy62M7ZxcIuSuTc3MjtDHEL2H0gttyO1MORWg8e19rF/z/QVGkhH7ThF",
	"fHcnWTzzZhHSYq84zEK3eVpBaBh3EPjHTVVrEJgsdqBd8ly1jXecbw+jfRVn438M8XBjfmOzxSOD3cz0",
	"9eYgwibW32mgo8WtWHdHuVX2PBoZZou4SEf1ctwI86+ljtzb/mmzT4+jua3yDCYIEy7rTJDwE2RpQDdP",
	"Wm+/O7Zs4/EvU+aQ7rvBm+hB4I2V61g9rHN2UKhppvdRaJ9yEoUzW1T4dllftHmqhGkn+tMoLy2a7Cwv",
	"df13AAAA///CDzWIdxgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
