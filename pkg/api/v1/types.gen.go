// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors A list of errors.
	Errors []string `json:"errors"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID openapi_types.UUID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVW0/bShD+K6M55+EcycSh8OQ3IAiZFgmRIB4AocUeJwveS/cSiJD/e7Vrp8RJKKqE",
	"1FbqU5zxXL755pvxCxZKaCVJOovZC9piRoLFxyNDzFFurScT/mujNBnHKb4tasbFnWBaczmNFlaW3HEl",
	"WX3e83QLTZihdYbLKTYJlmQLw3XwxQyPjr8APWtD1nIlLXQpwalHkhDLWHAKlJuR6f5jssyq7h+ocCHr",
	"w9OjvfOGh5L9CqdXn8dweZG/RnVYEnzemaodyQR1bsGrSbC1rOc5gJkXTO4YYiW7rwmCG1TKgJsR8Jao",
	"ZLPfraAuL/K10AGceetAMFfMovkGubU32PYMc1Z7Ai6By0KJwNDp1cS+01Psp0nQ0FfPDZWYXbfNtahW",
	"WLttEjw2RpkLslpJS5sjp/DabuOl5taBqqD1GGCC3JHYPv3OwIxhiw1sXYkA5o8RHi83KclHgY6eLCpl",
	"BHOYofe8fGds+eivon9C0ZHP7bJO1vVy24RoLiu12cGYCm+4W8AkSmBMZs4Lgv/Gk/H/cMYkm5Ig6eDg",
	"PAdugcn4FHoW4WXoYDwZQ6FkxafesJA2boPjrqa3C/RTY4JzMraFNBwMB7uBcqVJMs0xw73BcLCHCWrm",
	"ZlHnKdM8ne+mLenRpJV14TesQ4SRl0Hxqxe9pZCsO1TlIi6Wko5kDGNa17yIgemDDUCWX4bw9K+hCjP8",
	"J339dKTddyPtlWj6g3LGUzS0ByYC/TQcfljt1aprg/VFQdZWvoZl9cDp/gcW79/OLRiiw0r5JkHrhWBm",
	"8X0yUVLd6gTVsHDfrrtLGKWbrA87feFlE7BNacvAT8i1wYeLfBQlY5ggF0Vyvf1mtXnD3QsZw6ZgFqW2",
	"XLGsXbf+WJMVln586Jrm9veSwP6vksAAWrTwxCxI5aBSXpZrwjght6IKuF9APnpDG03zLQAA///VL3i8",
	"zQkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
