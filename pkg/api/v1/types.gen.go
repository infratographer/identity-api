// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// GetOwnerIssuersParams defines parameters for GetOwnerIssuers.
type GetOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
