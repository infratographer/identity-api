// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`

	// Scope Scopes that this client can request
	Scope *[]string `json:"scope,omitempty"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Error defines model for Error.
type Error struct {
	// Errors List of error messages
	Errors []string `json:"errors"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID openapi_types.UUID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID openapi_types.UUID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound = Error

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/bNhT+KwS3hw1Qbffy5Lc07gJ17VbECfqQBgVDHdtMJVLjIZ0agf77cEjZliLF",
	"aYxsqLe+URR1Lt/5zoW65dIUpdGgHfLxLbeApdEI4eEP434zXme0lkY70I6WoixzJYVTRg+v0WjaQ7mA",
	"QtDqZwszPuY/DbeCh/EtDt9YayyvqirhGaC0qiQhfMxPAY23EtiNQKaNY7Oglw7W35LoYwvCQYrowdJz",
	"aU0J1qlorcyFKj4XoiyVnocdkWWKFIj8Q+ukW5XAxxydVXrOO8Ycv3nH4GtpAVEZjawWyZz5ApoFNcic",
	"YcYtwNbPPFlLNVfXIB1Jvb75gp+9VaSyreHtx9+n7Pw03X5V25Lwr8/m5pkWBdTH6FSV8LhzV84RW/hC",
	"6GcWRCaucmB0jM2MZW4BTEWgkq6/vUadn6Z3Ph2w9x4dK4STi7D9iSvETzz6zJYi98CUZkpLUxBCbz+e",
	"4QM+BX+qhFv4yysLGR9fROeiVQ3ULqukjvifR94tjnNV868dduEzBVr2oVO/QeYWwjG3UMhkkMKk0Iws",
	"AHQ84cpB0U+MekNYK1b7hiGq7AsDSlP2iJvS9pMZ3Yc1QTuBHByc1vnexRW9lIDY421+I1bInPUw2Hp1",
	"ZUwOQnf0rcWQypj+HU1A2z2K3il0zMxYeM8KQBRzwP1dr/Vc9qTqwdQUlXVxSieEUivjZ8YWwvEx915l",
	"D2RkOvlRrB5RrAKe/RUrucuXyw21zstMOPjRtA6ZB1XC9+xEJ1ZoF3xdn8FHtZ2+rA+msBeDEYv2sHSy",
	"V+L3B2myfaLicnx/DwNpwd1jXsO6aTzXkbAjuzZ4XgbslZ6ZnmYJ0lvlVuwsEH0KdqkksF+mZ9Nf2Xuh",
	"xRwK0n/0IWUKmdBhRZQp6CURYHo2ZdLomZp7G6ZaDH1NuRzuV9AWzRO+BIvRpNFgNHhO2JgStCgVH/OX",
	"g9HgJU94KdwihHwoSjVcPh/G1o7D27hIJ1V0kXozrYhfwaY0C1Gh/SYJSaQVBTigDnrRTxLZIIiibTJj",
	"jfOYr1XzZiiovSeNsX43sarqMmnfHV6MRk92bbgzqvTcH6Zxypj5nDWOJRx9UQi72kAXCBBB2VJaUOG9",
	"aOZ2rNzzyOt2CE7A/e/wbzr8reAn/NXo1X2CN5YON1fMdrROwCGjhCenqQaJK+PdNnjbwjK4P4JVskmz",
	"2BpweKuyb0iwdN2DdsY2jl1RMnXWWmZviEPI/gPJZR9MrhqPG+Vi952rJWiWTppxivjuTrJ45vUqpMWj",
	"4jAPbeawglAzbi/wQ65skb9a7UC7pKmoi3ecTvejvY+T7T+GeLjvvjbZ6onBrifyqj2BkInVdxroaHEj",
	"1v1RbpQ9B1qE6SIu0km1HjjC9GqwJ/e6v1weIMRZkE1UKK1ZKhqCQua3ep/XWaBWD0nWtn2PVOmC8S/z",
	"ZZ/W2yJN9KAx98hHtM0e/tSd9CH+PKaWuA2BZPh2XVyUPlTCNLP8MGpLgyY7a0tV/R0AAP//YhK7rDIY",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
