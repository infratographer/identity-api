// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors A list of errors.
	Errors []string `json:"errors"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID openapi_types.UUID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xV30/rNhT+V468PWxSaHp371PeLhShsCEhWsQDIOQmJ60hsT3baYlQ/vfp2Ck0bRhi",
	"YtqQ7lNT+/h858d3vvPEMlVpJVE6y5InZrMlVtx/HhnkDlNrazT0Xxul0TiB/jYruajuKq61kAt/wvNc",
	"OKEkL897lq7RyBJmnRFywdqI5WgzIzTZsoQdHf8B+KgNWiuUtNC5BKceUIKHseAUKLdE0/1n0carmt9j",
	"5sjr/frB3tVGEGQf4fTq9ylcXqQvr7pYIvZ4sFAHklfYmZFVG7FwsuvnOyzrissDgzzn8xKBzKBQBtwS",
	"QYRCRfv5DgZ1eZHuPB3BWW0dVNxlS398w4S1NyzkDCte1ghCgpCZqqhCp1cz+0ZOPp82Ygb/rIXBnCXX",
	"IbkQ1VbVbtuITbBEhxdotZIW93tu6yxDawcqU655Y8GZGkcvEc2VKpHLvQA2bgjy2BhlXkdEuh4ChFJY",
	"B6qAYEGowmE1TLjugBvDm71oOggK5tNwXeT7JUknVI4eEwtlKu5Ywupa5G8wJZ38GKJ3DJGv5/AkRbt8",
	"uW3ptZCF2s9gillthGtg5ikwRbMSGcIv09n0Vzjjki+wQung+3kKwgKX/otyruiSMpjOppApWYhFbTi5",
	"9dPghCvxdYC+axaxFRobQhqPxqMvVHKlUXItWMK+jsajryximrul53nMtYhXX+JQdH+klXX0S+Pgw0hz",
	"Yvz2EgklROsOVd74wVLSofTPuNalyPzD+N5SIJtlRF8/GyxYwn6KX7ZV3K2quAfR9htFiuQPgsD4QH8b",
	"jz8Mext1p7FB5Iq6hA061fTbB4L3tXMgBm+wBd9GzNZVxU3z3BlPqW50iDWc9O26U0JP3Wi32fGTyNvA",
	"ZFoX+z0Pa+S555obXqHzNLkeVq3gmZSv80njwhLPt82cJWHm+r2Ntkr192rXtrf/Ig92Nud7+PDtv+LD",
	"CEKLYM0tSOWgULXMd1gSEttiCayFC8q6ECuUkE6GeROxBQ7owQm6YHPYpJP3koM8fjZm/AOF+H8z4gTd",
	"Nh3mzasUaNv2rwAAAP//R0nq4l8MAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
