// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// Id OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Iss OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Sub OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerIssuersParams defines parameters for GetOwnerIssuers.
type GetOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dq87nD0Qa8YEr21EyvLfAAAA//+5OvyFtSMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
