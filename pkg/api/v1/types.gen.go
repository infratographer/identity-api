// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/identity-api/internal/crdbx"
	"go.infratographer.com/x/gidx"
)

// AddGroupMembers defines model for AddGroupMembers.
type AddGroupMembers struct {
	// MemberIDs IDs of the members to add to the group
	MemberIDs []gidx.PrefixedID `json:"member_ids"`
}

// AddGroupMembersResponse defines model for AddGroupMembersResponse.
type AddGroupMembersResponse struct {
	// Success true if the members were added successfully
	Success bool `json:"success"`
}

// CreateGroup defines model for CreateGroup.
type CreateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name string `json:"name"`
}

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimConditions A CEL expressions to restrict authentication to a subset of identities
	// whose claims must match the expressions. By default all identities
	// issued by the issuer are allowed to authenticate
	ClaimConditions *string `json:"claim_conditions,omitempty"`

	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JWKSURI JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// URI URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Group defines model for Group.
type Group struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// ID ID of the group
	ID gidx.PrefixedID `json:"id"`

	// Name a name for the group
	Name string `json:"name"`

	// OwnerID ID of the owner of the group
	OwnerID *gidx.PrefixedID `json:"owner_id,omitempty"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimConditions A CEL expressions to restrict authentication to a subset of identities
	// whose claims must match the expressions. By default all identities
	// issued by the issuer are allowed to authenticate
	ClaimConditions string `json:"claim_conditions"`

	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// ID ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JWKSURI JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// URI URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimConditions A CEL expressions to restrict authentication to a subset of identities
	// whose claims must match the expressions. By default all identities
	// issued by the issuer are allowed to authenticate
	ClaimConditions *string `json:"claim_conditions,omitempty"`

	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JWKSURI JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// URI URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// ID OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// Pagination collection response pagination
type Pagination struct {
	// Limit the limit used for the collection response
	Limit int `json:"limit"`

	// Next the cursor for the next page
	Next *crdbx.Cursor `json:"next,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	// Description a description for the group
	Description *string `json:"description,omitempty"`

	// Name a name for the group
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// ID OAuth 2.0 User ID
	ID gidx.PrefixedID `json:"id"`

	// Issuer OAuth 2.0 Issuer of the user
	Issuer string `json:"iss"`

	// Name Name of the user
	Name *string `json:"name,omitempty"`

	// Subject OAuth 2.0 Subject for the user
	Subject string `json:"sub"`
}

// GroupID defines model for groupID.
type GroupID = gidx.PrefixedID

// IssuerID defines model for issuerID.
type IssuerID = gidx.PrefixedID

// OwnerID defines model for ownerID.
type OwnerID = gidx.PrefixedID

// PageCursor defines model for pageCursor.
type PageCursor = crdbx.Cursor

// PageLimit defines model for pageLimit.
type PageLimit = int

// SubjectID defines model for subjectID.
type SubjectID = gidx.PrefixedID

// GroupCollection defines model for GroupCollection.
type GroupCollection struct {
	Groups []Group `json:"groups"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// GroupIDCollection defines model for GroupIDCollection.
type GroupIDCollection struct {
	GroupIDs []gidx.PrefixedID `json:"group_ids"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// GroupMemberCollection defines model for GroupMemberCollection.
type GroupMemberCollection struct {
	GroupID   gidx.PrefixedID   `json:"group_id"`
	MemberIDs []gidx.PrefixedID `json:"member_ids"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// IssuerCollection defines model for IssuerCollection.
type IssuerCollection struct {
	Issuers []Issuer `json:"issuers"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// OAuthClientCollection defines model for OAuthClientCollection.
type OAuthClientCollection struct {
	Clients []OAuthClient `json:"clients"`

	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
}

// UserCollection defines model for UserCollection.
type UserCollection struct {
	// Pagination collection response pagination
	Pagination Pagination `json:"pagination"`
	Users      []User     `json:"users"`
}

// ListGroupMembersParams defines parameters for ListGroupMembers.
type ListGroupMembersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetIssuerUsersParams defines parameters for GetIssuerUsers.
type GetIssuerUsersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// GetOwnerOAuthClientsParams defines parameters for GetOwnerOAuthClients.
type GetOwnerOAuthClientsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListGroupsParams defines parameters for ListGroups.
type ListGroupsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListOwnerIssuersParams defines parameters for ListOwnerIssuers.
type ListOwnerIssuersParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// ListUserGroupsParams defines parameters for ListUserGroups.
type ListUserGroupsParams struct {
	// Cursor the cursor to the results to return
	Cursor *PageCursor `form:"cursor,omitempty" json:"cursor,omitempty" query:"cursor"`

	// Limit limits the response collections
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty" query:"limit"`
}

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// AddGroupMembersJSONRequestBody defines body for AddGroupMembers for application/json ContentType.
type AddGroupMembersJSONRequestBody = AddGroupMembers

// ReplaceGroupMembersJSONRequestBody defines body for ReplaceGroupMembers for application/json ContentType.
type ReplaceGroupMembersJSONRequestBody = AddGroupMembers

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroup

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb3XPbuBH/VzBsH9oZWrTvnuo3x77x6Jo0qRVPbpJ4MhC5kpCQAA8Abase/u8dfPAb",
	"pChZduXUT5ZJYLH72w/sLsAHL2RJyihQKbzTBy/FHCcggev/lpxl6fRC/YxAhJykkjDqnXokQmyBMNID",
	"PN8j6mGK5crzPYoT8E7Lub7H4c+McIi8U8kz8D0RriDBiqhcp2qokJzQped790dLdmQfLkl0P/nAYUHu",
	"IdJ0yrdHJEkZl4ZfuVKD2YTQBceSLTlOV8AnIUuC+0AR8fLczrWcXVrOct8jQmTABySkyAxxy0iiAxRv",
	"WsiU+x67o4PiIQ6CZTwEpEe6pSyIHJ6o7y1nue+leAnnGReMd4WVK0ChfockQ+o/DiKLpVD/cpAZp4Xk",
	"f2bA15XoZpY3VtKQR/P7yXkxaWsxSQRUErk+wikJCJXAKY4DTdXKznBKjkIWwRLoEdxLjo8kXmpnNayX",
	"POcWlLckIbKLSaweiwKMlFEBKGRxDKEaIHrw0LNccChml8C9sUwaQopHkc2/QyiHjNQOcVtnNf/w7HNW",
	"8qbeFDhrIHQQOi8BV49CRiVQvRhO05iEWL0JvgvzuhIm5SwFLglUQVr/IhIS/eOvHBbeqfeXoArugZku",
	"Ar2w0pOVHnOO19aDCMUFM0MkPlQjjVwF6l8KZhrUbsq1mNFjrmY1VY1rxqeUbunkfhGt9wfVNxI10Xqs",
	"bdAsjtt4OnccsV+YtSD7QRopUgXY7yCZA98r4L0wt7bkp3TMRIu1d+2PZ2DAQAzk+7SQmrR+pYY9WYsh",
	"rpk12cZejMVkWuMjmVn6yUJZwc6jMSsI5b73/iyTq/OYAJV7gSzUpMZDVlv/yXAreHo0bppZdG7J5b53",
	"LfZkabvJ6XuZ2MY+FbtdlFtoGZKPxsqQ0fmUWV0xdxZFtYAuujg0Q2JzhemFUIRVgmjdXWXLOIqKHLqs",
	"/XaJpKPDYX9Yu8n9toRXNsPqSiqyMAThEFMliog05bwDDkpSiJCdt8jiWDFpeZ4zFgPumn6ximLtnAOW",
	"YLKtDjsNHh46uq39jxaqaqnB3UQ5L/LgLhH1fNPsFv+aVMW8DbCOqINJ8i1kNCKmWOisfobOf3uL4D7l",
	"IIQaYiottWwoEc7kShU6xlu1WakcX4DU4dIUQQTEV3q3YqouUesJlGRCogTLcKVFqlGfoDdrFMECZ7FE",
	"OI4bNHT4jdB8rWeZYIyw0nAcszvQ9lzjCL5SF8pG5gSnKaGmlMGRER/HHxrodKY2oWkDY0kiyX4ALUSV",
	"DDG5Am7/9zoRwfe+3/0Q3zJOuuD//umfM3R9Ne2I0XQyNUyN6jWhM7TKEkyPOOAIz2NoWlTZF+nI62Tq",
	"+mramjpB75oK/aq23K+ekRnd4lh5JkWEhixRCP3+6aPYIJOWx2XUhqsaapWV1/fEjqnjLCJAQxc69o2q",
	"obFEckUEMlsfCjFFigMQsj8+OrbfXdRglhzv2RcQg4QdAuVZfIfXAql4OdkuEj5DDDQVRnsDK/Yv97RW",
	"1+xi8471mEhre3HfhjnVY7Zh+33ZmxvkvZ3aRkX/xLKl9fQa7g843A/bTU8w3t7EX3eVkbtK3YVaW0vH",
	"evyuC1X+dp1GWMKr170mWS/LHZrdjG0yp0uOqdSyFmPEVmmSKxSaXsEvk2PbL0A62D3Nhn9Ry0zYwi7o",
	"0pGAkIPsYbbG68yM25TD1UNOia4KJB8a7YzmWrU2QXnOU+s1+C2txe7TImU5+hXKBERV8tkl7vke3OMk",
	"jcE7PTn22+dD+niIRyrNOFEAw70cPK8rVlIDFd8N+h7+9O9/fP5jtZr/8UZ8np2sPtOrOCQnx/gy/s/b",
	"T/GPPhN4luO6lvYMsjeOIGN2gEPvFNj+W5dDSDCJu2R/U4+L/CQT7ig27Mpqvf04MnFVNNVCZiceZNZ1",
	"xt6P6b8UohtkF9l8iCd7dljqZQRXdoo7cCgIzKI3WpmELlh3/RmEGSdyjT7qnXIG/JaEgP42+zj7O3qH",
	"KV5CokLW2YcpIgJhqn8pHhP1Uu0gs48zFDK6IMuM6yAjdL1IpHbZngWapD3fuwUuDEvHk+PJiS6gUqA4",
	"Jd6p9+vkePKrbprKlVZsoDzw9iSwvefgwfyYXuRGRFXzql/KbjVP00gHcvW8vov5jQswX9zaCWs7jONA",
	"ulh6b+fReX7TOjz+5fh4q+73UJe61RBw9JpnZQ8U1YYpW0oSrE/zDQ1tDvWmvVK7Pvf/Uk8VTPK7NBtj",
	"UyGXIP/PtdE4oNlFFZcgBVK+zROT+OM5y2SlmSrtmPSrJ/dLjzIH8cGDvc7V8qd2YmTNwB4TztdoeqGW",
	"cbndpd1nWip2gVMNCYpbZS/HJVAhaIH1pbnaUHOCVnqsNLgBwkuQmsybtbbsA8TQXjPZpwkbJCduKFNV",
	"4TgqIp1btfD0EaPx2qQ9mEaNJCrEFM0BZXpe1EW+nqw9DnjdH37DovXeMK/z1so/VcTLD1PdlYp6PWUg",
	"HgVJdbjZ7071073q4mqfd70lQjYOTndWtL9xaO3e4sjR5kJfn/O6CJTjAvf9Hof7NcAaiGApEw7Mz6JI",
	"6dMQMa2nQcDbB9WH5lht/p7ZufpOuXdyN4duhvSbOdR7BWmMzcnXNm5lp71q+pk0XappnDOPCLLBQ3nb",
	"djARvIKE3ULNzBacJXXzkCsgvMdI1NQaCE8ZfKu7wwefT/ZBOkad9gJa8ECiEfXwtOg5DxZf5uzJNvol",
	"Q5bmU38mcUC1MN9YC1t07og0vfcluQVqrb7Q19ReDhyqic0Yd64/rJUlyBeukqLTtosqTCVV6qHcllzY",
	"l/WDK93fzSVMDfFc+O9/L2ycTz7zRvgYtZcFRaF5t857AmRQXvIcdsdrsUv+QqqPsw6sNGhdrnV4kgZG",
	"eZE1cW3Dg7jquyUieLBfkOVB7b5ybwNQjW30o7bFmJVfhR0YxO7b3w6kGa46mxpxcy+oAXino+ouxcwd",
	"t1pr1vZLy+MevSdp+t1krHtBblNLVvMpGUo5uyVCXzxYQXPljEbP9aXhk4XGLjDPHB8f3SfusYtxTeGO",
	"X1ffoDl7MG+JMFdGzDhtfLjX6sr2y0/k+u3P/ZrK2ITP6MZLqVVbamlfG+vnuzU1S8if1NVeWlOzUsSY",
	"Aq3jT7VPoZz7pDIYc/Wz9pHST+Eone/JXGcDRuiejbGR1VsvcZn7Nkk9K/a1UE8tMyD6U+xj9WT7ZaT4",
	"td1rZIqvk9fgQf2xzau+BFQlwmNq7ep2isMCzDovpMY2H6rt9ahOkazrxFRLAxoZk0KIYn+cr3Uxgkjk",
	"zh7Uan0ZxP9SiQeZlTS+re/mJQ7QXXrNy2edmqBQj0CMomrDalylElrcoYnNr0HL6Y0kdRONomYvLrKK",
	"MQuXhlT/Vl14+U3+3wAAAP//sWso8z1HAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
