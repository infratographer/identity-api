// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"go.infratographer.com/x/gidx"
)

// CreateIssuer defines model for CreateIssuer.
type CreateIssuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// CreateOAuthClient defines model for CreateOAuthClient.
type CreateOAuthClient struct {
	// Audience Audiences that this client can request
	Audience *[]string `json:"audience,omitempty"`

	// Name A human-readable name for the client
	Name string `json:"name"`
}

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	// Success Always true.
	Success bool `json:"success"`
}

// Issuer defines model for Issuer.
type Issuer struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings map[string]string `json:"claim_mappings"`

	// Id ID of the issuer
	ID gidx.PrefixedID `json:"id"`

	// JwksUri JWKS URI
	JWKSURI string `json:"jwks_uri"`

	// Name A human-readable name for the issuer
	Name string `json:"name"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI string `json:"uri"`
}

// IssuerUpdate defines model for IssuerUpdate.
type IssuerUpdate struct {
	// ClaimMappings CEL expressions mapping token claims to other claims
	ClaimMappings *map[string]string `json:"claim_mappings,omitempty"`

	// JwksUri JWKS URI
	JWKSURI *string `json:"jwks_uri,omitempty"`

	// Name A human-readable name for the issuer
	Name *string `json:"name,omitempty"`

	// Uri URI for the issuer. Must match the "iss" claim value in incoming JWTs
	URI *string `json:"uri,omitempty"`
}

// OAuthClient defines model for OAuthClient.
type OAuthClient struct {
	// Audience Grantable audiences
	Audience []string `json:"audience"`

	// Id OAuth 2.0 Client ID
	ID gidx.PrefixedID `json:"id"`

	// Name Description of Client
	Name string `json:"name"`

	// Secret OAuth2.0 Client Secret
	Secret *string `json:"secret,omitempty"`
}

// UpdateIssuerJSONRequestBody defines body for UpdateIssuer for application/json ContentType.
type UpdateIssuerJSONRequestBody = IssuerUpdate

// CreateOAuthClientJSONRequestBody defines body for CreateOAuthClient for application/json ContentType.
type CreateOAuthClientJSONRequestBody = CreateOAuthClient

// CreateIssuerJSONRequestBody defines body for CreateIssuer for application/json ContentType.
type CreateIssuerJSONRequestBody = CreateIssuer

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX2/bNhD/KgduDxug2G775rc0HgJ1KxbECfqQBgVNne1LJVIjKSeGoe8+kJRi2ZLt",
	"2R2Kpu0bRZ3u3+93f+wVEyrLlURpDRuumBFzzLg/XmjkFmNjCtTuOdcqR20J/VuRcso+ZTzPSc78DU8S",
	"sqQkT682JO0yRzZkxmqSM1ZGLEEjNOVOlg3ZxR9/AT7lGo0hJQ1UKsGqzyjBmzFgFSg7R109s6jWqiYP",
	"KKzT+vD42XwqNDmTmxbeffhzDLfX8fqrypeIPZ3N1JnkGVZiTqqMWLjZ1nMO8yLj8kwjT/gkRXBiMFUa",
	"7ByBQqKidrydTt1ex1uf9uB9YSxk3Iq5v/7IyJiPLMQMC54WCCSBpFCZy9C7DzfmQEw+njJiGv8pSGPC",
	"hnchuOBVI2v3ZVQh/vd5YecXKaG0bdh5kRBK0ZWd6o0BO+cW7JwMCK8FBJfgPEBjWcTIYtZNjOqCa82X",
	"p8IQTLZh6EqCi3mEKVq8RpMrabAdsCmEQGM63Egf+dKA1QX21uYmSqXIZctercaZfDElRUk77HgEarqP",
	"8JsEjEf1RSU1o+Spd6VxSk+YxKOflXtE5VLCoh3lG22zZ0202zzhFn928JfMgzJiJ7blS82l9bHWMuao",
	"HtzVA7wr8Lo3gOAP+Cr/0jbQDdlo/eQaz8WO9h4xg0Kj3eFsw9dxkDs0IJq19pzde48Eyalq2xmjKDTZ",
	"Jdx42o9RL0gg/Da+Gf8O77nkM8yc/fOrGMgAl/7kCJS5l44O45sxCCWnNCs0d2qNnyxkU9xtYFM1i9gC",
	"tQkuDXqD3iuXG5Wj5DmxIXvTG/TesIjl3M49Afo8p/7iVT/MTdNfhUM8KkOIbjq6k2Ob9ylOPCruvklJ",
	"p1LzDC1qw4Z33ZQRDbqQu3Zu1Hkesto0a0LhBmxU7aVtxh5gVXnvVIXZ7sN9PRj43qekrQqJ53lKwofW",
	"fzDO2VXD2q8ap2zIfumv1+R+tSP3t1YHz40tToSpPy1SaIhFzBRZxvXyOZGeDiFFa4Jz15TvmnUfuvos",
	"sHwTkEu0PzgazfBPguISrQFX2zrz9oFPVGHXyKx7SG83PGX0XFFhJpj+ipL/UEtxPXz2Ahe2r6DZjdRK",
	"Zyd+voN9d3WkD9ZRlZ1HsmEIz2iBEuJRE7WQ7f31FGTeLn0FHIXKzM+XlwxJxcaToPB1tMZhstyT+9yt",
	"Su3sh5X1tJIowrr7lfLvf9S+Vcnyf059tbSXm2uJc7j8RmEPHjeQ78a80SAtSu5XjnCIR2W9hfgFV5mO",
	"umz/RXGAHjdetyNGrtWC3Gbku8LGCCxk4onWQZnat2+fOO3UfGX2fPEEDhE0liFxxLjtYFM1gQ+x6Zg+",
	"Y5/pJPy3deMh+X3Qp9kBXkbfaZBmb98py38DAAD//4/iRMDsFgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
